{"version":3,"sources":["assets/nutriNavLogo.svg","components/Nav.js","components/FavouriteCard.js","components/FavouriteResults.js","pages/Favourites.js","pages/FoodDetail.js","components/ComparisonCard.js","pages/Compare.js","components/FoodCard.js","components/TestApp.js","components/FoodResults.js","pages/Home.js","components/Toaster.js","firebaseConfig.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","activeClassName","to","exact","icon","faHome","faHeart","src","logo","alt","faSearch","faExchangeAlt","Component","FavouriteCard","id","this","props","foodItem","encodeURI","type","brand","console","log","imgURL","name","onClick","removeItem","key","FavouriteResults","foodItems","map","index","Favourites","savedFoods","FoodDetail","state","food","foodType","isReady","getDetails","then","response","foodDetail","data","foods","completedNutrients","completeFoodNutrients","completedFood","completeFood","setState","serving","servingUnit","servingWeight","isRaw","secondaryNutrients","other","value","unit","mainNutrients","nutrient","addToSaved","ComparisonCard","secondNutrient","Compare","userCompared","FoodCard","nix_item_id","food_name","photo","thumb","brand_name","FoodResults","Home","onChange","userSearch","placeholder","foodTypeButtonClick","Toaster","hidden","color","overall","message","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","creds","App","getAllSaved","database","ref","on","savedFromDB","val","arraySaved","push","completeSaved","runToaster","duration","max","maxCompared","maxFavourites","length","isNotDuplicate","userFavourites","filter","getNutrients","nutrientsAPI","axios","url","method","responseType","headers","tempNutrients","targetNutrients","getNutrientID","nutrients","tempNutrient","usda_nutr_desc","includes","attr_id","getValue","foodNutrients","othersToArray","others","otherNutrients","highres","Math","round","serving_qty","serving_unit","serving_weight_grams","Calories","nf_calories","Carbs","nf_total_carbohydrate","Sodium","nf_sodium","Sugar","nf_sugars","Protein","nf_protein","Fat","nf_total_fat","nf_saturated_fat","Fiber","nf_dietary_fiber","secondary","full_nutrients","urlEndpoint","params","query","fetchFood","res","brandedFood","branded","commonFood","common","randomSearch","randomInteger","floor","random","e","target","killToaster","setTimeout","toaster","child","remove","path","render","match","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c3a419c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nutriNavLogo.ba2638de.svg\";","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n\tfaExchangeAlt,\r\n\tfaHome,\r\n\tfaHeart,\r\n\tfaSearch\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport logo from '../assets/nutriNavLogo.svg';\r\n\r\nclass Nav extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"navigation\">\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<nav>\r\n\t\t\t\t\t\t<ul className=\"navContainer\">\r\n\t\t\t\t\t\t\t<div className=\"navList\">\r\n\t\t\t\t\t\t\t\t<li className=\"navItem\">\r\n\t\t\t\t\t\t\t\t\t<NavLink activeClassName=\"activeNav\" to=\"/\" exact>\r\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faHome} />\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"navItem\">\r\n\t\t\t\t\t\t\t\t\t<NavLink activeClassName=\"activeNav\" to=\"/favourites\">\r\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faHeart} />\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"navList\">\r\n\t\t\t\t\t\t\t\t<li className=\"navLogo\">\r\n\t\t\t\t\t\t\t\t\t<NavLink activeClassName=\"activeNav\" to=\"/\" exact>\r\n\t\t\t\t\t\t\t\t\t\t<img src={logo} alt=\"\" />\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div className=\"navList\">\r\n\t\t\t\t\t\t\t\t<li className=\"nav-icon navItem\">\r\n\t\t\t\t\t\t\t\t\t<NavLink activeClassName=\"activeNav\" to=\"/\" exact>\r\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faSearch} />\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"nav-icon navItem\">\r\n\t\t\t\t\t\t\t\t\t<NavLink activeClassName=\"activeNav\" to=\"/compare\">\r\n\t\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faExchangeAlt} />\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</nav>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass FavouriteCard extends Component {\r\n  render() {\r\n    let id = this.props.foodItem.id\r\n    id=encodeURI(id)\r\n    const type = this.props.foodItem.brand ? \"branded\" : \"common\";\r\n    console.log(type);\r\n    return (\r\n      <Link to={`/food/${type}/${id}`}>\r\n        <div className=\"foodCard\">\r\n          <div className=\"cardImage\">\r\n            <img src={this.props.foodItem.imgURL} alt={this.props.foodItem.name} />\r\n          </div>\r\n\r\n          <div className=\"cardContent\">\r\n            <h2 className=\"cardTitle\">{this.props.foodItem.brand ? this.props.foodItem.brand : this.props.foodItem.name}</h2>\r\n            {this.props.foodItem.brand ? <h3 className=\"cardSubtitle\">{this.props.foodItem.name}</h3> : null}\r\n            <button\r\n              onClick={() => {\r\n                this.props.removeItem(this.props.foodItem.key, \"userFavourites\");\r\n              }}\r\n            >\r\n              REMOVE\r\n            </button >\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FavouriteCard;\r\n","import React, { Component } from \"react\";\r\nimport FavouriteCard from \"./FavouriteCard\";\r\n\r\nclass FavouriteResults extends Component {\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"foodContainer\">\r\n        {this.props.foodItems.map((foodItem, index) => (\r\n          <FavouriteCard removeItem={this.props.removeItem} key={index} foodItem={foodItem} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FavouriteResults;\r\n","import React, { Component } from 'react';\r\nimport Nav from '../components/Nav';\r\nimport FavouriteResults from \"../components/FavouriteResults\";\r\n\r\nclass Favourites extends Component {\r\n\trender() {\r\n\t\treturn (\r\n      <div className=\"favourites\">\r\n        <Nav />\r\n        <div className=\"pageContainer\">\r\n          <div className=\"wrapper\">\r\n            <h1 className=\"pageTitle\">Saved Items</h1>\r\n            <FavouriteResults foodItems={this.props.savedFoods} removeItem={this.props.removeItem} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\t}\r\n}\r\n\r\nexport default Favourites;\r\n","import React, { Component } from 'react';\r\nimport { faExchangeAlt, faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Nav from '../components/Nav';\r\n\r\nclass FoodDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      food: {},\r\n      foodType: this.props.type,\r\n      isReady: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getDetails(this.props.id, this.props.type).then(response => {\r\n      const foodDetail = response.data.foods[0];\r\n      const completedNutrients = this.props.completeFoodNutrients(foodDetail);\r\n      const completedFood = this.props.completeFood(\r\n        foodDetail,\r\n        completedNutrients\r\n      );\r\n      this.setState(\r\n        {\r\n          food: completedFood\r\n        },\r\n        () => {\r\n          this.setState({\r\n            isReady: true\r\n          });\r\n        }\r\n      );\r\n    }); // end of .then()\r\n  }\r\n\r\n\trender() {\r\n\t\treturn this.state.isReady ? (\r\n      <div className=\"detailPage\">\r\n        <Nav />\r\n\r\n        <div className=\"detailContainer\">\r\n          <div className=\"wrapper\">\r\n            <div className=\"detailContent\">\r\n              <div className=\"detailIntro\">\r\n                <div className=\"detailImg\">\r\n                  <img src={this.state.food.imgURL} alt={this.state.food.name}></img>\r\n                </div>\r\n                <div className=\"detailDesc\">\r\n                  <div className=\"detailTitle\">\r\n                    <h1> {this.state.food.name}</h1>\r\n                  </div>\r\n\r\n                  <div className=\"detailDescription\">\r\n                    <h2>Description</h2>\r\n                    <ul>\r\n                      <li>\r\n                        Serving: {this.state.food.serving} {this.state.food.servingUnit} ({this.state.food.servingWeight}\r\n                        g){\" \"}\r\n                      </li>\r\n                      <li>Raw State: {this.state.food.isRaw} </li>\r\n                      {this.state.food.brand ? <li> Brand: {this.state.food.brand} </li> : \"\"}\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"detailNutrition\">\r\n                <h2>Nutritional Facts</h2>\r\n                <div className=\"detailNutritionFacts\">\r\n                  <ul className=\"nutrientList\">\r\n                    {this.state.food.secondaryNutrients.map(other => {\r\n                      return (\r\n                        <li key={other.name}>\r\n                          <div className=\"nutrient\">\r\n                            <div className=\"nutrientName\">{other.name}</div>\r\n                            <div className=\"nutrientUnit\">\r\n                              {other.value}\r\n                              {other.unit}\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n\r\n                  <ul className=\"nutrientList\">\r\n                    {this.state.food.mainNutrients.map(nutrient => {\r\n                      return (\r\n                        <li key={nutrient.name}>\r\n                          <div className=\"nutrient\">\r\n                            <div className=\"nutrientName\">{nutrient.name}</div>\r\n                            <div className=\"nutrientUnit\">\r\n                              {nutrient.value}\r\n                              {nutrient.unit}\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n\r\n                {/* <div className=\"detailVitsMins\">\r\n\t\t\t\t\t\t\t\t\t<h2>Vitamins and Minerals</h2>\r\n\t\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t\t{this.state.food.mainNutrients.map(nutrient => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<li key={nutrient.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={nutrient.value ? 'row' : 'row null'}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"col1\">{nutrient.name}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"col2\">{nutrient.value}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"col3\">{nutrient.unit} </span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</div> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"detailControl\">\r\n          <button\r\n            onClick={() => {\r\n              this.props.addToSaved(this.state.food, \"userCompared\");\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Add to Compare{\" \"}\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              this.props.addToSaved(this.state.food, \"userFavourites\");\r\n            }}\r\n          >\r\n            {\" \"}\r\n            Add to Favourites{\" \"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      \"future loader\"\r\n    );\r\n\t}\r\n}\r\nexport default FoodDetail;\r\n","import React from 'react';\r\n\r\nfunction ComparisonCard(props) {\r\n\treturn (\r\n\t\t<div className=\"comparisonCard\">\r\n\t\t\t<div className=\"imageContainer\">\r\n\t\t\t\t<img src={props.food.imgURL} alt={props.food.name} />\r\n\t\t\t</div>\r\n\t\t\t<h3>{props.food.name}</h3>\r\n\t\t\t<h4>Nutritional Facts</h4>\r\n\t\t\t<ul>\r\n\t\t\t\t{props.food.secondaryNutrients.map(secondNutrient => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li key={secondNutrient.name}>\r\n\t\t\t\t\t\t\t<div className=\"nutrient\">\r\n\t\t\t\t\t\t\t\t<div className=\"nutrientName\">{secondNutrient.name}</div>\r\n\t\t\t\t\t\t\t\t<div className=\"nutrientUnit\">\r\n\t\t\t\t\t\t\t\t\t{secondNutrient.value}\r\n\t\t\t\t\t\t\t\t\t{secondNutrient.unit}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\r\n\t\t\t<h4>Vitamins and Minerals</h4>\r\n\t\t\t<ul>\r\n\t\t\t\t{props.food.mainNutrients.map(nutrient => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li key={nutrient.id}>\r\n\t\t\t\t\t\t\t<div className=\"nutrient\">\r\n\t\t\t\t\t\t\t\t<div className=\"nutrientName\">{nutrient.name}</div>\r\n\t\t\t\t\t\t\t\t<div className=\"nutrientUnit\">\r\n\t\t\t\t\t\t\t\t\t{nutrient.value}\r\n\t\t\t\t\t\t\t\t\t{nutrient.unit}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\t\t\t<button\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tprops.removeItem(props.id, 'userCompared');\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tREMOVE\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ComparisonCard;\r\n","import React, { Component } from 'react';\r\nimport Nav from '../components/Nav';\r\nimport ComparisonCard from '../components/ComparisonCard';\r\n\r\nclass Compare extends Component {\r\n\t// componentDidMount() {\r\n\t// \tconsole.log('compare array:', this.state.foodsToCompare);\r\n\t// }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"comparisonPage\">\r\n\t\t\t\t<Nav />\r\n\t\t\t\t<h1 className=\"pageTitle\">Compare Items</h1>\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<div className=\"comparisonContainer\">\r\n\t\t\t\t\t\t{this.props.userCompared.map(food => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<ComparisonCard\r\n\t\t\t\t\t\t\t\t\tkey={food.key}\r\n\t\t\t\t\t\t\t\t\tid={food.key}\r\n\t\t\t\t\t\t\t\t\tfood={food}\r\n\t\t\t\t\t\t\t\t\tremoveItem={this.props.removeItem}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Compare;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass FoodCard extends Component {\r\n\trender() {\r\n\t\tlet id = this.props.foodItem.nix_item_id\r\n\t\t\t? this.props.foodItem.nix_item_id\r\n\t\t\t: this.props.foodItem.food_name;\r\n\t\tid = encodeURI(id);\r\n\t\tconst type = this.props.foodItem.nix_item_id\r\n\t\t\t? \"branded\" : \"common\"\r\n\r\n\t\treturn (\r\n\t\t\t\r\n\t\t\t<Link to={`/food/${type}/${id}`}>\r\n\t\t\t\t<div className=\"foodCard\">\r\n\t\t\t\t\t<div className=\"cardImage\">\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={this.props.foodItem.photo.thumb}\r\n\t\t\t\t\t\t\talt={this.props.foodItem.food_name}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"cardContent\">\r\n\t\t\t\t\t\t<h2 className=\"cardTitle\">\r\n\t\t\t\t\t\t\t{this.props.foodItem.nix_item_id\r\n\t\t\t\t\t\t\t\t? this.props.foodItem.brand_name\r\n\t\t\t\t\t\t\t\t: this.props.foodItem.food_name}\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t{this.props.foodItem.nix_item_id ? (\r\n\t\t\t\t\t\t\t<h3 className=\"cardSubtitle\">{this.props.foodItem.food_name}</h3>\r\n\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Link>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default FoodCard;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n// import FoodDetail from \"../pages/FoodDetail\";\r\n\r\nclass TestApp extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // target nutrients from the Client Brief (initially without ids)\r\n      targetNutrients: [\r\n        { name: \"Vitamin A\", unit: \"IU\" },\r\n        { name: \"Vitamin D\", unit: \"IU\" },\r\n        { name: \"Vitamin B-6\", unit: \"mg\" },\r\n        { name: \"Vitamin C\", unit: \"mg\" },\r\n        { name: \"Vitamin E\", unit: \"mg\" },\r\n        { name: \"Magnesium\", unit: \"mg\" },\r\n        { name: \"Zinc\", unit: \"mg\" },\r\n        { name: \"Iron\", unit: \"mg\" },\r\n        { name: \"Fiber\", unit: \"g\" }\r\n      ],\r\n      type: \"common\",\r\n      id: \"skinless chicken breast\",\r\n      nutrients: [], // target nutrients with ids\r\n      search: \"pizza pops\", // from input\r\n      food: {},\r\n      nutrientsValues: []\r\n    };\r\n  }\r\n\r\n  // retrieves the most up to date nutrients from API and their ids, maps the ids to the target nutrient list\r\n  getNutrients = () => {\r\n    let nutrientsAPI = [];\r\n    axios({\r\n      url: \"https://trackapi.nutritionix.com/v2/utils/nutrients\",\r\n      method: \"GET\",\r\n      responseType: \"json\",\r\n      headers: {\r\n        \"x-app-id\": \"f55663ad\",\r\n        \"x-app-key\": \"588db5b40c0c827f5af2785681421696\",\r\n        \"x-remote-user-id\": \"0\"\r\n      }\r\n    }).then(response => {\r\n      nutrientsAPI = response.data;\r\n      // transforms each target nutrient into an object which includes the nutrient's id\r\n      // stores these objects in a temporary array\r\n      const tempNutrients = this.state.targetNutrients.map(nutrient => {\r\n        return {\r\n          name: nutrient.name,\r\n          id: this.getNutrientID(nutrient.name, nutrientsAPI),\r\n          unit: nutrient.unit\r\n        };\r\n      });\r\n      // updates the nutrients state with the temporary array\r\n      this.setState({\r\n        nutrients: tempNutrients\r\n      });\r\n    });\r\n  };\r\n\r\n  // retrieves the id of a nutrient from a given nutrient list, using the name\r\n  getNutrientID = (name, nutrientsAPI) => {\r\n    const tempNutrient = nutrientsAPI.filter(nutrient => {\r\n      return nutrient.usda_nutr_desc.includes(name);\r\n    });\r\n    return tempNutrient.length > 0 ? tempNutrient[0].attr_id : \"\";\r\n  };\r\n\r\n  // retrieves the amount/value of a nutrient from a given nutrient list, using the id\r\n  getValue = (id, foodNutrients) => {\r\n    const tempNutrient = foodNutrients.filter(nutrient => {\r\n      return nutrient.attr_id === id;\r\n    });\r\n    return tempNutrient.length > 0 ? tempNutrient[0].value : 0;\r\n  };\r\n\r\n  othersToArray = (others) => {\r\n    const otherNutrients = [];\r\n    for (let key in others) {\r\n      otherNutrients.push({\r\n        name: key,\r\n        value: others[key].value,\r\n        unit: others[key].unit\r\n      });\r\n    }\r\n    return otherNutrients;\r\n  };\r\n\r\n  completeFood = (food, nutrients) => {\r\n    // console.log(food);\r\n    const completedFood = {\r\n      name: food.food_name,\r\n      brand: food.brand_name,\r\n      url: food.photo.highres? food.photo.highres : food.photo.thumb,\r\n      isRaw: food.metadata.is_raw_food? \"Yes\" : \"No\",\r\n      serving: food.serving_qty,\r\n      servingUnit: food.serving_unit,\r\n      servingWeight: food.serving_weight_grams,\r\n      // other non-critical nutrients mentioned in the Client Brief\r\n      others: {\r\n        Calories: { value: Math.round(food.nf_calories), unit: \"kcal\" },\r\n        Carbs: {\r\n          value: Math.round(food.nf_total_carbohydrate),\r\n          unit: \"g\"\r\n        },\r\n        Sodium: { value: Math.round(food.nf_sodium), unit: \"mg\" },\r\n        Sugar: { value: Math.round(food.nf_sugars), unit: \"g\" },\r\n        Protein: {value: Math.round(food.nf_protein), unit: \"g\"},\r\n        Fat: { value: Math.round(food.nf_total_fat), unit: \"g\" },\r\n        \"Saturated Fat\": {\r\n          value: Math.round(food.nf_saturated_fat),\r\n          unit: \"g\"\r\n        },\r\n        Fiber: {\r\n          value: Math.round(\r\n            // uses the fiber from the main nutrients\r\n            nutrients.filter(n => n.name === \"Fiber\")[0].value\r\n          ),\r\n          unit: \"g\"\r\n        }\r\n      }\r\n    };\r\n    const others = completedFood.others;\r\n    completedFood.others = this.othersToArray(others);\r\n    // console.log(completedFood);\r\n    return completedFood;\r\n  };\r\n\r\n  // receives a food item and returns its completed main nutrient list with name, value, id, and measure unit\r\n  completeFoodNutrients = food => {\r\n    const completeNutrients = this.state.nutrients.map(nutrient => {\r\n      // calls a function from props that maps this nutrient to its value using another axios call\r\n      const value = this.getValue(nutrient.id, food.full_nutrients);\r\n      // returns the completed nutrient profile as an object to exist in the completedNutrients array\r\n      return {\r\n        name: nutrient.name,\r\n        id: nutrient.id,\r\n        value: Math.round(value),\r\n        unit: nutrient.unit\r\n      };\r\n    });\r\n    return completeNutrients;\r\n  };\r\n\r\n  // gets the details about a food item from the API based on the id(nix or food_name) and type(common vs branded)\r\n  // caller must resolve the promise on their own\r\n  getDetails = (id, type) => {\r\n    const axiosType = type ? type : this.state.type;\r\n    const urlEndpoint =\r\n      axiosType === \"common\" ? \"natural/nutrients\" : \"search/item\";\r\n    const method = axiosType === \"common\" ? \"POST\" : \"GET\";\r\n    const params = axiosType === \"common\" ? {} : { nix_item_id: id };\r\n    const data = axiosType === \"common\" ? { query: id } : {};\r\n    return axios({\r\n      url: `https://trackapi.nutritionix.com/v2/${urlEndpoint}`,\r\n      method: method,\r\n      headers: {\r\n        \"x-app-id\": \"f55663ad\",\r\n        \"x-app-key\": \"588db5b40c0c827f5af2785681421696\",\r\n        \"x-remote-user-id\": \"0\",\r\n        \"content-type\": \"application/json\"\r\n      },\r\n      data: data,\r\n      params: params\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getNutrients();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <FoodDetail\r\n          type={this.state.type}\r\n          id={this.state.id}\r\n          getDetails={this.getDetails}\r\n          completeFoodNutrients={this.completeFoodNutrients}\r\n          completeFood={this.completeFood}\r\n        ></FoodDetail> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TestApp;\r\n","import React, { Component } from 'react';\r\nimport FoodCard from './FoodCard';\r\n\r\nclass FoodResults extends Component {\r\n\tcomponentDidMount() {}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"foodContainer\">\r\n\t\t\t\t{this.props.foodItems.map((foodItem, index) => (\r\n\t\t\t\t\t<FoodCard key={index} foodItem={foodItem} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default FoodResults;\r\n","import React, { Component } from 'react';\r\nimport Nav from '../components/Nav';\r\nimport TestApp from '../components/TestApp';\r\n\r\nimport FoodResults from '../components/FoodResults';\r\n\r\nclass Home extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"home\">\r\n\t\t\t\t<Nav />\r\n\t\t\t\t<div className=\"pageContainer\">\r\n\t\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t\t<div className=\"searchBar\">\r\n\t\t\t\t\t\t\t<div className=\"input\">\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"search\"\r\n\t\t\t\t\t\t\t\t\tname=\"search\"\r\n\t\t\t\t\t\t\t\t\tid=\"search\"\r\n\t\t\t\t\t\t\t\t\tonChange={this.props.userSearch}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"What food are you looking for?\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<div className=\"toggleBtns\">\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"toggle toggleCommon\"\r\n\t\t\t\t\t\t\t\t\tid=\"common\"\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.foodTypeButtonClick}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tCommon\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=\"toggle toggleBranded\"\r\n\t\t\t\t\t\t\t\t\tid=\"branded\"\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.foodTypeButtonClick}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tBranded\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<FoodResults foodItems={this.props.foodItems} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Toaster extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\r\n          this.props.hidden ? \"toasterContainer hidden\" : \"toasterContainer show\"\r\n        }\r\n      >\r\n        <div className={\"toaster \" + this.props.color}>\r\n          <h1>{this.props.overall}</h1>\r\n          <p> {this.props.message}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Toaster;\r\n","import firebase from 'firebase';\r\n\r\n\r\n var firebaseConfig = {\r\n   apiKey: \"AIzaSyCdy_v8Of--vsc5yPhbKDECOOHl3nlHIfo\",\r\n   authDomain: \"nutrinav-97224.firebaseapp.com\",\r\n   databaseURL: \"https://nutrinav-97224.firebaseio.com\",\r\n   projectId: \"nutrinav-97224\",\r\n   storageBucket: \"nutrinav-97224.appspot.com\",\r\n   messagingSenderId: \"37824965367\",\r\n   appId: \"1:37824965367:web:9c87ff57c94915ec9c01f2\"\r\n };\r\n\r\n firebase.initializeApp(firebaseConfig);\r\n\r\n export default firebase;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Favourites from './pages/Favourites';\r\nimport FoodDetail from './pages/FoodDetail';\r\nimport Compare from './pages/Compare';\r\nimport Home from './pages/Home';\r\nimport Toaster from './components/Toaster';\r\nimport firebase from './firebaseConfig';\r\nimport './App.css';\r\n// import creds from './apiKey';\r\n\r\nconst creds = {\r\n  key: \"0d45466c03d80039b01119cd195711a9\",\r\n  id: \"ff87fb2a\"\r\n};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // target nutrients from the Client Brief (initially without ids)\r\n      targetNutrients: [\r\n        { name: \"Vitamin A\", unit: \"IU\" },\r\n        { name: \"Vitamin D\", unit: \"IU\" },\r\n        { name: \"Vitamin B-6\", unit: \"mg\" },\r\n        { name: \"Vitamin C\", unit: \"mg\" },\r\n        { name: \"Vitamin E\", unit: \"mg\" },\r\n        { name: \"Magnesium\", unit: \"mg\" },\r\n        { name: \"Zinc\", unit: \"mg\" },\r\n        { name: \"Iron\", unit: \"mg\" }\r\n      ],\r\n      commonFood: [],\r\n      brandedFood: [],\r\n      nutrients: [], // target nutrients with ids\r\n      userFavourites: [],\r\n      userCompared: [],\r\n      type: \"common\",\r\n      maxCompared: 3,\r\n      maxFavourites: 9,\r\n      toaster: {\r\n        hidden: true\r\n      }\r\n    };\r\n  }\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getNutrients(); // get nutrients from API in raw state\r\n\t\tthis.randomSearch();\r\n    this.getAllSaved('userCompared');\r\n    this.getAllSaved('userFavourites');\r\n\t}\r\n\r\n\tgetAllSaved = state => {\r\n\t\tconst dbRef = firebase.database().ref(`${state}`);\r\n\t\tdbRef.on('value', response => {\r\n\t\t\tconst savedFromDB = response.val();\r\n\t\t\tconst arraySaved = [];\r\n\t\t\tfor (let key in savedFromDB) {\r\n\t\t\t\tarraySaved.push({\r\n\t\t\t\t\tkey: key,\r\n\t\t\t\t\tid: savedFromDB[key].id,\r\n\t\t\t\t\tname: savedFromDB[key].name,\r\n\t\t\t\t\tbrand: savedFromDB[key].brand,\r\n\t\t\t\t\tserving: savedFromDB[key].serving,\r\n\t\t\t\t\tservingUnit: savedFromDB[key].servingUnit,\r\n\t\t\t\t\tservingWeight: savedFromDB[key].servingWeight,\r\n\t\t\t\t\timgURL: savedFromDB[key].imgURL,\r\n\t\t\t\t\tmainNutrients: savedFromDB[key].mainNutrients,\r\n\t\t\t\t\tsecondaryNutrients: savedFromDB[key].secondaryNutrients\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.completeSaved(arraySaved, state);\r\n\t\t});\r\n\t};\r\n\r\n\tcompleteSaved = (data, state) => {\r\n\t\tthis.setState({\r\n\t\t\t[state]: data\r\n\t\t});\r\n\t};\r\n\r\n\trunToaster = (message, overall, duration) => {};\r\n\r\n\taddToSaved = (food, state) => {\r\n    const max = state === \"userCompared\" ? this.state.maxCompared : this.state.maxFavourites;\r\n    console.log(\r\n      \"addToSaved()\",\r\n      \"Max: \",\r\n      max,\r\n      \"state length: \",\r\n      this.state[state].length\r\n    );\r\n\t\tif ( (this.isNotDuplicate(food.id, state)) && (this.state[state].length < max)) {\r\n\t\t\tconst dBCompRef = firebase.database().ref(`${state}`);\r\n\t\t\tdBCompRef.push(food);\r\n\t\t\t// this.setState(\r\n\t\t\t//   {\r\n\t\t\t//     toaster: {\r\n\t\t\t//       hidden: false,\r\n\t\t\t//       message: `This food has been successfully saved to your ${state}`,\r\n\t\t\t//       overall: \"SUCCESS\",\r\n\t\t\t//       duration: 5000\r\n\t\t\t//     }\r\n\t\t\t//   },\r\n\t\t\t//   () => this.killToaster(this.state.toaster.duration)\r\n\t\t\t// );\r\n\t\t} else {\r\n\t\t}\r\n\t};\r\n\r\n\tisNotDuplicate = (id, state) => {\r\n\t\tconst copySaved =\r\n\t\t\tstate === 'userCompared'\r\n\t\t\t\t? [...this.state.userCompared]\r\n\t\t\t\t: [...this.state.userFavourites];\r\n\r\n\t\tconst result = copySaved.filter(food => {\r\n\t\t\treturn food.id === id;\r\n\t\t});\r\n\t\treturn result.length === 0;\r\n\t};\r\n\r\n\t// retrieves the most up to date nutrients from API and their ids, maps the ids to the target nutrient list\r\n\tgetNutrients = () => {\r\n\t\tlet nutrientsAPI = [];\r\n\t\taxios({\r\n\t\t\turl: 'https://trackapi.nutritionix.com/v2/utils/nutrients',\r\n\t\t\tmethod: 'GET',\r\n\t\t\tresponseType: 'json',\r\n\t\t\theaders: {\r\n\t\t\t\t'x-app-key': creds.key,\r\n\t\t\t\t'x-app-id': creds.id,\r\n\t\t\t\t'x-remote-user-id': '0'\r\n\t\t\t}\r\n\t\t}).then(response => {\r\n\t\t\tnutrientsAPI = response.data;\r\n\t\t\t// transforms each target nutrient into an object which includes the nutrient's id\r\n\t\t\t// stores these objects in a temporary array\r\n\t\t\tconst tempNutrients = this.state.targetNutrients.map(nutrient => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: nutrient.name,\r\n\t\t\t\t\tid: this.getNutrientID(nutrient.name, nutrientsAPI),\r\n\t\t\t\t\tunit: nutrient.unit\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\t// updates the nutrients state with the temporary array\r\n\t\t\tthis.setState({\r\n\t\t\t\tnutrients: tempNutrients\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t// retrieves the id of a nutrient from a given nutrient list, using the name\r\n\tgetNutrientID = (name, nutrientsAPI) => {\r\n\t\tconst tempNutrient = nutrientsAPI.filter(nutrient => {\r\n\t\t\treturn nutrient.usda_nutr_desc.includes(name);\r\n\t\t});\r\n\t\treturn tempNutrient.length > 0 ? tempNutrient[0].attr_id : '';\r\n\t};\r\n\r\n\t// retrieves the amount/value of a nutrient from a given nutrient list, using the id\r\n\tgetValue = (id, foodNutrients) => {\r\n\t\tconst tempNutrient = foodNutrients.filter(nutrient => {\r\n\t\t\treturn nutrient.attr_id === id;\r\n\t\t});\r\n\t\treturn tempNutrient.length > 0 ? tempNutrient[0].value : 0;\r\n\t};\r\n\r\n\tothersToArray = others => {\r\n\t\tconst otherNutrients = [];\r\n\t\tfor (let key in others) {\r\n\t\t\totherNutrients.push({\r\n\t\t\t\tname: key,\r\n\t\t\t\tvalue: others[key].value,\r\n\t\t\t\tunit: others[key].unit\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn otherNutrients;\r\n\t};\r\n\r\n\tcompleteFood = (food, nutrients) => {\r\n\t\tconst completedFood = {\r\n\t\t\tid: food.nix_item_id ? food.nix_item_id : food.food_name,\r\n\t\t\tname: food.food_name,\r\n\t\t\tbrand: food.brand_name,\r\n\t\t\timgURL: food.photo.highres ? food.photo.highres : food.photo.thumb,\r\n\t\t\tserving: Math.round(food.serving_qty),\r\n\t\t\tservingUnit: food.serving_unit,\r\n\t\t\tservingWeight: food.serving_weight_grams,\r\n\t\t\tmainNutrients: [...nutrients],\r\n\t\t\t// other non-critical nutrients mentioned in the Client Brief\r\n\t\t\tsecondaryNutrients: {\r\n\t\t\t\tCalories: { value: Math.round(food.nf_calories), unit: 'kcal' },\r\n\t\t\t\tCarbs: {\r\n\t\t\t\t\tvalue: Math.round(food.nf_total_carbohydrate),\r\n\t\t\t\t\tunit: 'g'\r\n\t\t\t\t},\r\n\t\t\t\tSodium: { value: Math.round(food.nf_sodium), unit: 'mg' },\r\n\t\t\t\tSugar: { value: Math.round(food.nf_sugars), unit: 'g' },\r\n\t\t\t\tProtein: { value: Math.round(food.nf_protein), unit: 'g' },\r\n\t\t\t\tFat: { value: Math.round(food.nf_total_fat), unit: 'g' },\r\n\t\t\t\t'Saturated Fat': {\r\n\t\t\t\t\tvalue: Math.round(food.nf_saturated_fat),\r\n\t\t\t\t\tunit: 'g'\r\n\t\t\t\t},\r\n\t\t\t\tFiber: {\r\n\t\t\t\t\tvalue: Math.round(food.nf_dietary_fiber),\r\n\t\t\t\t\tunit: 'g'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tconst secondary = completedFood.secondaryNutrients;\r\n\t\tcompletedFood.secondaryNutrients = this.othersToArray(secondary);\r\n\t\treturn completedFood;\r\n\t};\r\n\r\n\t// receives a food item and returns its completed main nutrient list with name, value, id, and measure unit\r\n\tcompleteFoodNutrients = food => {\r\n\t\tconst completeNutrients = this.state.nutrients.map(nutrient => {\r\n\t\t\t// calls a function from props that maps this nutrient to its value\r\n\t\t\tconst value = this.getValue(nutrient.id, food.full_nutrients);\r\n\t\t\t// returns the completed nutrient profile as an object to exist in the completedNutrients array\r\n\t\t\treturn {\r\n\t\t\t\tname: nutrient.name,\r\n\t\t\t\tid: nutrient.id,\r\n\t\t\t\tvalue: Math.round(value),\r\n\t\t\t\tunit: nutrient.unit\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn completeNutrients;\r\n\t};\r\n\r\n\t// gets the details about a food item from the API based on the id(nix or food_name) and type(common vs branded)\r\n\t// caller must resolve the promise on their own\r\n\tgetDetails = (id, type) => {\r\n\t\tconst urlEndpoint = type === 'common' ? 'natural/nutrients' : 'search/item';\r\n\t\tconst method = type === 'common' ? 'POST' : 'GET';\r\n\t\tconst params = type === 'common' ? {} : { nix_item_id: id };\r\n\t\tconst data = type === 'common' ? { query: id } : {};\r\n\t\treturn axios({\r\n\t\t\turl: `https://trackapi.nutritionix.com/v2/${urlEndpoint}`,\r\n\t\t\tmethod: method,\r\n\t\t\theaders: {\r\n\t\t\t\t'x-app-key': creds.key,\r\n\t\t\t\t'x-app-id': creds.id,\r\n\t\t\t\t'x-remote-user-id': '0',\r\n\t\t\t\t'content-type': 'application/json'\r\n\t\t\t},\r\n\t\t\tdata: data,\r\n\t\t\tparams: params\r\n\t\t});\r\n\t};\r\n\r\n\tfetchFood = query => {\r\n\t\taxios({\r\n\t\t\turl: 'https://trackapi.nutritionix.com/v2/search/instant',\r\n\t\t\tmethod: 'get',\r\n\t\t\theaders: {\r\n\t\t\t\t'x-app-key': creds.key,\r\n\t\t\t\t'x-app-id': creds.id\r\n\t\t\t},\r\n\t\t\tparams: {\r\n\t\t\t\tquery\r\n\t\t\t}\r\n\t\t}).then(res => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tbrandedFood: res.data.branded,\r\n\t\t\t\tcommonFood: res.data.common\r\n\t\t\t\t// userFavourites: res.data.common\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\trandomSearch = () => {\r\n\t\tconst randomArray = ['corn', 'cheese', 'spinach', 'big mac'];\r\n\t\tconst randomInteger = Math.floor(Math.random() * 4);\r\n\t\tthis.fetchFood(randomArray[randomInteger]);\r\n\t};\r\n\r\n\tuserSearch = e => {\r\n\t\tconst query = e.target.value;\r\n\t\tthis.fetchFood(query);\r\n\t};\r\n\r\n\tfoodTypeButtonClick = e => {\r\n\t\tthis.setState({\r\n\t\t\ttype: e.target.id\r\n\t\t});\r\n\t};\r\n\r\n\tkillToaster = duration => {\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\ttoaster: {\r\n\t\t\t\t\thidden: true\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}, duration);\r\n  };\r\n  \r\n  removeItem = (key, state) => {\r\n    const dbRef = firebase.database().ref(state)\r\n    dbRef.child(key).remove();\r\n  }\r\n\r\n\trender() {\r\n\t\treturn (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Route path=\"/\" exact render={() => <Home foodItems={this.state.type === \"branded\" ? this.state.brandedFood : this.state.commonFood} userSearch={this.userSearch} foodTypeButtonClick={this.foodTypeButtonClick} />} />\r\n            <Route path=\"/favourites\" render={() => <Favourites savedFoods={this.state.userFavourites} removeItem={this.removeItem} />} />\r\n            <Route path=\"/compare\" render={() => <Compare userCompared={this.state.userCompared} removeItem={this.removeItem} />} />\r\n            <Route exact path=\"/food/:type/:id\" render={props => <FoodDetail id={props.match.params.id} type={props.match.params.type} getDetails={this.getDetails} completeFoodNutrients={this.completeFoodNutrients} completeFood={this.completeFood} addToSaved={this.addToSaved}></FoodDetail>} />\r\n          </header>\r\n          <div className={this.state.toaster.hidden ? \"toasterContainer hidden\" : \"toasterContainer\"}>\r\n            <Toaster overall={this.state.toaster.overall} message={this.state.toaster.message} />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}